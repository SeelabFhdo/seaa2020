-- @atlcompiler emftvm
-- @path Domain=/de.fhdo.lemma.data.datadsl.metamodel/model/DataViewpointModel.xcore
module domain;
create INOUT : Domain, FAKE_OUT : Domain from IN : UML2;
uses "helpers";

helper def : DomainModel : Domain!DataModel = OclUndefined;

helper def : ComlexTypeReferencesTodo : Sequence(
	TupleType(object : OclAny, refValue : String, ctx : String, type : String)
) = Sequence{};

rule registerTypeRefTodo(object : OclAny, refValue : String, ctx : String, type : String) {
	do {
		thisModule.registerTypeRefTodoTuple(
			Tuple{object = object, refValue = refValue, ctx = ctx, type = type}
		);
	}
}

rule registerTypeRefTodoTuple(
	ref : TupleType(object : OclAny, refValue : String, ctx : String, type : String)
) {
	do {
		if (not ref.type.oclIsUndefined())
			if (ref.type <> '')
				thisModule.ComlexTypeReferencesTodo <-
					thisModule.ComlexTypeReferencesTodo->including(ref);
	}
}

helper def : StructuredListsToCreate : Sequence(
	TupleType(ctx : Domain!Context, structure : String, qualifiedName : String)
) = Sequence{};

rule registerStructuredListToCreate(ctx : Domain!Context, structure : String) {
	using {
		newQualifiedName : String = thisModule.qualifiedComplexTypeName(ctx.name, structure);
		existingLists : Set(String) =
			thisModule.StructuredListsToCreate->collect(l | l.qualifiedName)->asSet();
	}
	do {
		if (not existingLists->exists(l | l = newQualifiedName))
			thisModule.StructuredListsToCreate <- thisModule.StructuredListsToCreate->including(
				Tuple{ctx = ctx, structure = structure, qualifiedName = newQualifiedName}
			);
	}
}

helper def : PrimitiveListsToCreate : Sequence(
	TupleType(ctx : Domain!Context, primitiveType : Domain!PrimitiveType, qualifiedName : String)
) = Sequence{};

rule registerPrimitiveListToCreate(ctx : Domain!Context, primitiveType : Domain!PrimitiveType) {
	using {
		qualifiedName : String = thisModule.qualifiedComplexTypeName(ctx.name,
			primitiveType.lemmaListName());
		existingLists : Set(Domain!PrimitiveType) =
			thisModule.PrimitiveListsToCreate->collect(l | l.primitiveType.typeName)->asSet();
	}
	do {
		if (not existingLists->exists(n | n = primitiveType.typeName))
			thisModule.PrimitiveListsToCreate <- thisModule.PrimitiveListsToCreate->including(
				Tuple{ctx = ctx, primitiveType = primitiveType, qualifiedName = qualifiedName}
			);
	}
}

entrypoint rule CreateDomainModel() {
    to
        t : Domain!DataModel
	do {
		thisModule.DomainModel <- t;
		t;
	}
}

unique lazy rule BoundedContext {
	from
		s : UML2!Package(
			s.hasStereotype('BoundedContext')
		)
	to
		t : Domain!Context(
			dataModel <- thisModule.DomainModel,
			name <- s.name.lemmaName()
		)
}

helper context UML2!Element def : getStereotypeValue(stereotype : String, value : String) : OclAny =
	if (not self.hasStereotype(stereotype)) then
		OclUndefined
	else
		self.getValue(self.getAppliedStereotype(stereotype.ddmmQualifiedName()), value)
	endif
;

rule Repository {
	from
		s : UML2!Class(
			s.hasStereotype('Repository')
		)
	using {
		associatedClasses : Sequence(UML2!Class) =
			s.outgoingAssociatedClasses(true)->collect(o | o.class);
		unambiguousManagedType : Boolean = associatedClasses->size() = 1;
		managedTypeName : String = if (unambiguousManagedType) then
				associatedClasses->first().name.lemmaName()
			else
				OclUndefined
			endif;
		createdOperation : UML2!Operation = OclUndefined;
	}
	to
		t : Domain!DataStructure(
			name <- s.name.lemmaName(),
			context <- thisModule.BoundedContext(s.getPackage()),
			features <- Sequence{#REPOSITORY}
		)
	do {
		thisModule.AttributeDataFields(t, t.context, s.attributesWithTypesInSameContext());
		thisModule.AssociationDataFields(t, t.context, s.associatedClasses(false, true), false);

		for (originalOperation in s.ownedOperation) {
			createdOperation <- thisModule.DataOperation(originalOperation, t, t.context);

			if (not originalOperation.hasReturnType() and unambiguousManagedType) {
				thisModule.registerStructuredListToCreate(t.context, managedTypeName);
				thisModule.registerTypeRefTodo(createdOperation, 'complexReturnType',
					t.context.name, managedTypeName.lemmaListName());
			}
		}

		t;
	}
}

rule Service {
	from
		s : UML2!Class(
			s.hasStereotype('Service')
		)
	using {
		createdOperation : UML2!Operation = OclUndefined;
	}
	to
		t : Domain!DataStructure(
			name <- s.name.lemmaName(),
			context <- thisModule.BoundedContext(s.getPackage()),
			features <- Sequence{#SERVICE}
		)
	do {
		thisModule.AttributeDataFields(t, t.context, s.attributesWithTypesInSameContext());
		thisModule.AssociationDataFields(t, t.context, s.associatedClasses(false, true), false);

		for (originalOperation in s.ownedOperation) {
			createdOperation <- thisModule.DataOperation(originalOperation, t, t.context);
		}

		t;
	}
}

helper context UML2!Class def : outgoingAssociatedClasses(inSameContext : Boolean)
	: Sequence(TupleType(class : UML2!Class, association : UML2!Association)) =
	self.outgoingAssociations()
		->collect(a |
			a.navigableOwnedEnd
				->select(p | p.type.oclIsTypeOf(UML2!Class))
				->collect(p | Tuple{class = p.type, association = a})
		)
		->flatten()
		->select(t |
			if (inSameContext) then
				t.class.getPackage() = self.getPackage()
			else
				true
			endif
		)
;

helper context UML2!Class def : associations() : Sequence(UML2!Association) =
	UML2!Association.allInstances()
		->select(a | a.ownedEnd->collect(e | e.type)->exists(t | t = self))
;

helper context UML2!Operation def : hasReturnType() : Boolean =
	self.ownedParameter->exists(p | p.direction = #return)
;

rule DataOperation(sourceOperation : UML2!Operation, structure : Domain!DataStructure,
	ctx : Domain!Context) {
	using {
		hasReturnType : Boolean = if not sourceOperation.type.oclIsUndefined() then
				not sourceOperation.type.name.oclIsUndefined()
			else
				false
			endif;
		hasMultivaluedReturnType : Boolean = if hasReturnType then
				sourceOperation.returnResult().get(0).isMultivalued()
			else
				false
			endif;
		hasComplexReturnType : Boolean = if hasReturnType then
				not sourceOperation.type.oclIsTypeOf(UML2!PrimitiveType)
			else
				false
			endif;
		sourceReturnTypeName : String = if (hasReturnType) then
				sourceOperation.type.name.lemmaName()
			else
				''
			endif;
		preparedReturnTypeName : String =
			if (hasReturnType) then
				if (hasMultivaluedReturnType) then
					sourceOperation.type.name.lemmaListName()
				else
					sourceOperation.type.name.lemmaName()
				endif
			else
				''
			endif;
		inputParameters : Sequence(UML2!Parameter) = sourceOperation.ownedParameter
			->select(p | p.direction <> #return and p.direction <> #out);
	}
	to
		t : Domain!DataOperation(
			name <- sourceOperation.name.lemmaName(),
			hidden <- sourceOperation.visibility = #private,
			dataStructure <- structure,
			features <- sourceOperation.appliedFeaturesFrom(Map{
				('Closure', #CLOSURE),
				('DefinesIdentity', #IDENTIFIER),
				('SideEffectFree', #SIDE_EFFECT_FREE),
				('ValidatesSpec', #VALIDATOR)
			})
		)
	do {
		if (hasComplexReturnType) {
			if (hasMultivaluedReturnType)
				thisModule.registerStructuredListToCreate(ctx, sourceReturnTypeName);

			thisModule.lemmaType(sourceOperation.type, t, 'complexReturnType', ctx.name,
				preparedReturnTypeName);
		} else if (hasMultivaluedReturnType) {
			thisModule.registerPrimitiveListToCreate(ctx, sourceOperation.type.lemmaType());
			thisModule.lemmaType(sourceOperation.type, t, 'complexReturnType', ctx.name,
				preparedReturnTypeName);
		} else if (hasReturnType)
			t.primitiveReturnType <- thisModule.lemmaTypeTuple(sourceOperation.type, Tuple{});

		for (parameter in inputParameters) {
			thisModule.DataOperationParameter(parameter, t, structure.context.name);
		}

		t;
	}
}

rule DataOperationParameter(sourceParameter : UML2!Parameter, operation : Domain!DataOperation,
	ctx : String) {
	using {
		sourceTypeName : String =
			if (not sourceParameter.type.oclIsUndefined() and
				not sourceParameter.type.name.oclIsUndefined()) then
				if (sourceParameter.isMultivalued()) then
					sourceParameter.type.name.lemmaListName()
				else
					sourceParameter.type.name.lemmaName()
				endif
			else
				''
			endif;
		allSourceParameters : Sequence(UML2!Parameter) = sourceParameter.operation.ownedParameter;
	}
	to
		t : Domain!DataOperationParameter(
			name <- sourceParameter.name.orUniqueName('unnamed', sourceParameter,
				allSourceParameters, 'name').lemmaName(),
			operation <- operation
		)
	do {
		if (sourceParameter.type.oclIsTypeOf(UML2!PrimitiveType))
			t.primitiveType <- thisModule.lemmaTypeTuple(sourceParameter.type, Tuple{});
		else
			thisModule.lemmaType(sourceParameter.type, t, 'complexType', ctx, sourceTypeName);
	}
}

helper def : lemmaType(type : OclAny, object : OclAny, refValue : String, ctx : String,
	typeName : String) : Domain!Type =
	thisModule.lemmaTypeTuple(
		type,
		Tuple{object = object, refValue = refValue, ctx = ctx, type = typeName}
	)
;

helper def : lemmaTypeTuple(type : OclAny, complexTypeRef : TupleType(object : OclAny,
	refValue : String, ctx : String, type : String)) : Domain!Type =
	if (type.oclIsUndefined()) then
		OclUndefined
	else if (type.oclIsTypeOf(UML2!PrimitiveType)) then
		type.lemmaType()
	else if (type.oclIsTypeOf(UML2!Class)) then
		thisModule.registerTypeRefTodoTuple(complexTypeRef)
	else
		OclUndefined
	endif
	endif
	endif
;

helper context UML2!PrimitiveType def : lemmaType() : Domain!PrimitiveType =
	if (self.name = 'Boolean') then
		thisModule.PrimitiveBoolean()
	else if (self.name = 'Integer') then
		thisModule.PrimitiveInteger()
	else if (self.name = 'String') then
		thisModule.PrimitiveString()
	else if (self.name = 'Real') then
		thisModule.PrimitiveDouble()
	else
		OclUndefined
	endif
	endif
	endif
	endif
;

rule PrimitiveBoolean() {
	to t : Domain!PrimitiveBoolean
	do { t;	}
}

rule PrimitiveInteger() {
	to t : Domain!PrimitiveInteger
	do { t;	}
}

rule PrimitiveDouble() {
	to t : Domain!PrimitiveDouble
	do { t;	}
}

rule PrimitiveString() {
	to t : Domain!PrimitiveString
	do { t;	}
}

rule DataField(sourceProperty : UML2!Property, structure : Domain!DataStructure, ctx : String) {
	using {
		sourceTypeName : String =
			if (not sourceProperty.type.oclIsUndefined() and
				not sourceProperty.type.name.oclIsUndefined()) then
				sourceProperty.type.name.lemmaName()
			else
				''
			endif;
		allSourceProperties : Sequence(UML2!Property) =
			if (not sourceProperty.class.oclIsUndefined()) then
				sourceProperty.class.ownedAttribute
			else
				Sequence{}
			endif;
		rawFieldName : String = if (not sourceProperty.name.oclIsUndefined()) then
				sourceProperty.name
			else if (not sourceProperty.class.oclIsUndefined()) then
				OclUndefined.orUniqueName('unnamed', sourceProperty, allSourceProperties, 'name')
			else
				sourceTypeName.toLowerFirst()
			endif
			endif;
		isPart : Boolean = if (not sourceProperty.type.oclIsUndefined()) then
				sourceProperty.type.hasStereotype('AggregatePart')
			else
				false
			endif;
		immutableValue : OclAny = if (not sourceProperty.class.oclIsUndefined()) then
				sourceProperty.class.getStereotypeValue('ValueObject', 'immutable')
			else
				false
			endif;
		isImmutable : Boolean = if (not immutableValue.oclIsUndefined()) then
				immutableValue
			else
				false
			endif;
	}
	to
		t : Domain!DataField(
			name <- rawFieldName.lemmaName(),
			hidden <- sourceProperty.visibility = #private,
			immutable <- isImmutable,
			dataStructure <- structure,
			features <- if (isPart) then
					sourceProperty.appliedFeaturesFrom(Map{('DefinesIdentity', #IDENTIFIER)})
						->including(#PART)
				else
					sourceProperty.appliedFeaturesFrom(Map{('DefinesIdentity', #IDENTIFIER)})
				endif
		)
	do {
		if (sourceProperty.type.oclIsTypeOf(UML2!PrimitiveType) and
			not sourceProperty.isMultivalued())
			t.primitiveType <- thisModule.lemmaTypeTuple(sourceProperty.type, Tuple{});
		else
			thisModule.lemmaType(sourceProperty.type, t, 'complexType', ctx, sourceTypeName);

		t;
	}
}

helper context UML2!Element def : appliedFeaturesFrom(
	featureMapping : Map(String, UML2!EEnumLiteral)
) : Sequence(UML2!EEnumLiteral) =
	featureMapping.getKeys()->select(k | self.hasStereotype(k))->collect(k | featureMapping.get(k))
;

rule Entity {
	from
		s : UML2!Class(
			s.hasStereotype('Entity')
		)
	using {
		aggregateParts : TupleType(class : UML2!Class, association : UML2!Association) =
			if (s.hasStereotype('AggregateRoot')) then
				s.findAggregatePartsInSameContext()
			else
				Sequence{}
			endif;
		partAssociations : Sequence(UML2!Association) = aggregateParts->collect(a | a.association);
		remainingAssociations : TupleType(class : UML2!Class, association : UML2!Association) =
			s.associatedClasses(false, true)
				->select(a | not partAssociations->includes(a.association));
		partProperty : UML2!Property = OclUndefined;
		partField : Domain!DataField = OclUndefined;
	}
	to
		t : Domain!DataStructure(
			name <- s.name.lemmaName(),
			context <- thisModule.BoundedContext(s.getPackage()),
			features <- if (s.hasStereotype('AggregateRoot')) then
					Sequence{#ENTITY, #AGGREGATE}
				else
					Sequence{#ENTITY}
				endif
		)
	do {
		thisModule.AttributeDataFields(t, t.context, s.attributesWithTypesInSameContext());
		thisModule.AssociationDataFields(t, t.context, aggregateParts, true);
		thisModule.AssociationDataFields(t, t.context, remainingAssociations, false);
		thisModule.DataOperations(t, t.context, s.ownedOperation);

		t;
	}
}

helper context UML2!Class def : attributesWithTypesInSameContext() : Sequence(UML2!Property) =
	self.ownedAttribute->select(a |
		if (not a.type.oclIsUndefined()) then
			a.type.oclIsTypeOf(UML2!PrimitiveType) or
			if (a.type.oclIsTypeOf(UML2!Class)) then
					a.type.getPackage() = self.package
				else
					false
			endif
		else
			true
		endif
	)
;

helper context UML2!Class def : findAggregatePartsInSameContext()
	: Sequence(TupleType(class : UML2!Class, association : UML2!Association)) =
	self.associatedClasses(false, true)->select(t |
		t.class.hasStereotype('AggregatePart') and
		t.class.getStereotypeValue('AggregatePart', 'aggregateRoot') = self
	)
;

rule ValueObject {
	from
		s : UML2!Class(
			s.hasStereotype('ValueObject') and
			not thisModule.BoundedContext(s.getPackage()).oclIsUndefined()
		)
	to
		t : Domain!DataStructure(
			name <- s.name.lemmaName(),
			context <- thisModule.BoundedContext(s.getPackage()),
			features <- Sequence{#VALUE_OBJECT}
		)
	do {
		thisModule.AttributeDataFields(t, t.context, s.attributesWithTypesInSameContext());
		thisModule.AssociationDataFields(t, t.context, s.associatedClasses(false, true), false);
		thisModule.DataOperations(t, t.context, s.ownedOperation);

		t;
	}
}

rule AssociationDataFields(
	structure : Domain!DataStructure,
	ctx : Domain!Context,
	associationDescriptions
		: Sequence(TupleType(class : UML2!Class, association : UML2!Association)),
	ignoreMultivalues : Boolean
) {
	using {
		property : UML2!Property = OclUndefined;
		dataField : Domain!DataField = OclUndefined;
	}
	do {
		for (d in associationDescriptions) {
			property <- d.association.memberEndOfType(d.class);
			dataField <- thisModule.DataField(property, structure, ctx.name);

			if (not ignoreMultivalues and property.isMultivalued()) {
				thisModule.registerStructuredListToCreate(ctx, d.class.name.lemmaName());
				thisModule.registerTypeRefTodo(dataField, 'complexType', ctx.name,
					d.class.name.lemmaListName());
			}
		}
	}
}

rule AttributeDataFields(
	structure : Domain!DataStructure,
	ctx : Domain!Context,
	attributes : Sequence(UML2!Property)
) {
	using {
		dataField : Domain!DataField = OclUndefined;
		primitiveType : Domain!PrimitiveType = OclUndefined;
	}
	do {
		for (a in attributes) {
			dataField <- thisModule.DataField(a, structure, ctx.name);

			if (a.isMultivalued()) {
				if (a.type.oclIsTypeOf(UML2!PrimitiveType)) {
					primitiveType <- a.type.lemmaType();
					thisModule.registerPrimitiveListToCreate(ctx, primitiveType);
					thisModule.registerTypeRefTodo(dataField, 'complexType', ctx.name,
						primitiveType.lemmaListName());
				} else {
					thisModule.registerStructuredListToCreate(ctx, a.type.name.lemmaName());
					thisModule.registerTypeRefTodo(dataField, 'complexType', ctx.name,
						a.type.name.lemmaListName());
				}
			}
		}
	}
}

rule DataOperations(
	structure : Domain!DataStructure,
	ctx : Domain!Context,
	operations : Sequence(UML2!Operation)
) {
	using {
		dataOperation : Domain!DataOperation = OclUndefined;
	}
	do {
		for (o in operations) {
			dataOperation <- thisModule.DataOperation(o, structure, ctx);
		}
	}
}

endpoint rule Endpoint() {
	using {
		object : OclAny = OclUndefined;
		refValue : String = OclUndefined;
		ctx : String = OclUndefined;
		type : String = OclUndefined;
		qualifiedTypeName : String = OclUndefined;
		complexType : Domain!ComplexType = OclUndefined;
		createdLists : Map(String, Domain!ListType) = Map{};
	}
	do {
		for (list in thisModule.StructuredListsToCreate) {
			createdLists <- createdLists->including(
				list.qualifiedName,
				thisModule.RawStructuredListType(list.ctx, list.structure)
			);
		}

		for (list in thisModule.PrimitiveListsToCreate) {
			createdLists <- createdLists->including(
				list.qualifiedName,
				thisModule.RawPrimitiveListType(list.ctx, list.primitiveType)
			);
		}

		for (refTodo in thisModule.ComlexTypeReferencesTodo) {
			object <- refTodo.object;
			refValue <- refTodo.refValue;
			ctx <- refTodo.ctx;
			type <- refTodo.type;
			qualifiedTypeName <- thisModule.qualifiedComplexTypeName(ctx, type);

			complexType <- thisModule.findCreatedComplexType(ctx, type);
			if (complexType.oclIsUndefined())
				complexType <- createdLists.get(qualifiedTypeName);

			object.refSetValue(refValue, complexType);
		}
	}
}

rule RawStructuredListType(ctx : Domain!Context, structure : String) {
	using {
		listName : String = structure.lemmaListName();
		fieldName : String = structure.toLowerFirst();
		dataField : Domain!DataField = thisModule.RawLemmaDataField(fieldName, ctx.name, structure);
	}
	to
		t : Domain!ListType(
			name <- listName,
			dataFields <- Sequence{dataField},
			context <- ctx
		)
	do {
		t;
	}
}

rule RawPrimitiveListType(ctx : Domain!Context, primitiveType : Domain!PrimitiveType) {
	to
		t : Domain!ListType(
			name <- primitiveType.lemmaListName(),
			primitiveType <- primitiveType,
			context <- ctx
		)
	do {
		t;
	}
}

rule RawLemmaDataField(name : String, ctx : String, complexType : String) {
	to
		t : Domain!DataField(
			name <- name
		)
	do {
		thisModule.registerTypeRefTodo(t, 'complexType', ctx, complexType);
		t;
	}
}