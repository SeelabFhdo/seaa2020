context Cargo {
	structure CargoRepository <repository> {
		ListCargo cargo,
	
		// A3: Assign concrete names to parameters
		//		string unnamed --> string trackingIDSelector
		function ListCargo findbyTrackingID(string trackingIDSelector),
		
		// A3: Assign concrete names to parameters
		//		string unnamed --> string customerIDSelector
		function ListCargo findbyCustomerID(string customerIDSelector)
	}

	structure Cargo <aggregate, entity> {
		// A1: Replace unspecified type in data fields with concrete type
		//		unspecified trackingID --> long trackingID
		long trackingID <identifier>,
		
		DeliverySpecification goal <part>,
		DeliveryHistory deliveryHistory <part>,
		CustomerShared CustomerShared
	}

	structure DeliveryHistory <entity> {
		Cargo cargo,
		ListHandlingEvent handlingEvent,
		CarrierMovement carriermovement
	}

	structure HandlingEvent <entity> {
		// A1: Replace unspecified type in data fields with concrete type
		//		unspecified completiontime --> date completiontime
		date completiontime <identifier>,
		
		// A1: Replace unspecified type in data fields with concrete type
		//		unspecified type --> string type
		string type <identifier>,
		
		Cargo handled
	}

	structure CarrierMovement <entity> {
		// A1: Replace unspecified type in data fields with concrete type
		//		unspecified scheduleID --> long scheduleID
		long scheduleID <identifier>
	}

	structure DeliverySpecification <valueObject> {
		// A1: Replace unspecified type in data fields with concrete type
		//		unspecified arrivaltime --> date arrivaltime
		date arrivaltime
	}

	list ListCargo {
		Cargo cargo
	}

	list ListHandlingEvent {
		HandlingEvent handlingEvent
	}

	structure CustomerShared <valueObject> {
		// A1: Replace unspecified type in data fields with concrete type
		//		unspecified customerID --> long customerID
		long customerID
	}

	list ListCustomerShared {
		CustomerShared customerShared
	}
}
