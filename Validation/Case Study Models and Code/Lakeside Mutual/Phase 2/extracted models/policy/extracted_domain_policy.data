context policy {
	structure RiskManagementService <service> {
		function PolicyEvent notifyRiskManagement(unspecified originator, unspecified ^date, CustomerShared customer, PolicyAggregateRoot policy)
	}

	structure InsuringAgreementEntity <entity> {
		unspecified id <identifier>,
		ListInsuringAgreementItem items
	}

	structure PolicyAggregateRoot <aggregate, entity> {
		unspecified creationDate,
		PolicyId id <identifier, part>,
		PolicyPeriod policyPeriod <part>,
		PolicyType policyType <part>,
		MoneyAmount policyLimit <part>,
		MoneyAmount insurancePremium <part>,
		InsuringAgreementEntity insuringAgreement
	}

	structure InsuringAgreementItem <valueObject> {
		immutable unspecified id,
		immutable unspecified title,
		immutable unspecified description
	}

	structure MoneyAmount <valueObject> {
		immutable unspecified amount,
		immutable unspecified currency
	}

	structure PolicyId <valueObject> {
		immutable unspecified id,
	
		function PolicyId random()
	}

	structure PolicyPeriod <valueObject> {
		immutable unspecified startDate,
		immutable unspecified endDate
	}

	structure PolicyType <valueObject> {
		immutable unspecified name
	}

	structure PolicyEvent <valueObject> {
		immutable unspecified originator,
		immutable unspecified ^date,
		CustomerShared CustomerShared
	}

	list ListInsuringAgreementItem {
		InsuringAgreementItem insuringAgreementItem
	}

	structure CustomerShared <valueObject> {
		unspecified customerId,
		CustomerProfileShared customerProfile
	}

	structure CustomerProfileShared <valueObject> {
		unspecified firstname,
		unspecified lastname,
		unspecified birthday,
		unspecified email,
		unspecified phoneNumber,
		AddressShared address,
		ListAddressShared moveHistory
	}

	structure AddressShared <valueObject> {
		unspecified streetAddress,
		unspecified postalCode,
		unspecified city
	}

	list ListAddressShared {
		AddressShared addressShared
	}
}
